---- Cinder JIT profile data binary file format ----

-- General rules --

- All versions will start with the same magic value and a uint32 version
  identifier.
- No alignment padding unless explicitly specified.
- All int types are little endian.
- str is uint16 len, followed by len bytes of utf-8 data (no null terminator).
- Version definitions may reference previous versions. The line '<< version n
  body >>' means "substitute everything after the magic value and version
  identifier from version n".
- python_version is bits 16-31 of sys.hexversion as a uint16 (e.g., 0x0308 for
  Python 3.8).

-- Version 1 --

uint64: magic value: 0x7265646e6963
uint32: 1 (version identifier)
uint32: num_code_keys
[num_code_keys] {
  str: code_key
  uint16: num_locations
  [num_locations] {
    uint16: bc_offset
    uint8: num_types
    [num_types] {
      str: type
    }
  }
}

-- Version 2 --
- Adds support for multiple type lists at each code location.

uint64: magic value: 0x7265646e6963
uint32: 2 (version identifier)
uint32: num_code_keys
[num_code_keys] {
  str: code_key
  uint16: num_locations
  [num_locations] {
    uint16: bc_offset
    uint8: num_profiles
    [num_profiles] {
      uint8: num_types
      [num_types] {
        str: type
      }
    }
  }
}

-- Version 3 --
- Adds a list of split dict keys for profile types.

uint64: magic value: 0x7265646e6963
uint32: 3 (version identifier)
<< version 2 body >>
uint32: num_type_key_lists
[num_type_key_lists] {
  str: type_name
  uint16: num_keys
  [num_keys] {
    str: key
  }
}

-- Version 4 --
- Embeds multiple copies of the version 3 body, to support multiple versions of
  Python in one profile blob.

uint64: magic value: 0x7265646e6963
uint32: 4 (version identifier)
uint8: num_python_versions
[num_python_versions] {
  uint16: python_version
  uint32: version_offset (from beginnning of file)
}
[num_python_versions] {
  << version 3 body >>
}
