--- Test Suite Name ---
AllPassesTest
--- Passes ---
@AllPasses
--- Test Name ---
ReturnConstant
--- Input ---
def test():
  return 1
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v1:ImmortalLongExact[1] = LoadConst<ImmortalLongExact[1]>
    Return v1
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v3:CInt32 = LoadEvalBreaker
    CondBranch<2, 1> v3
  }

  bb 2 (preds 0) {
    v4:CInt32 = RunPeriodicTasks {
      FrameState {
        NextInstrOffset 2
      }
    }
    Branch<1>
  }

  bb 1 (preds 0, 2) {
    v5:ImmortalLongExact[1] = LoadConst<ImmortalLongExact[1]>
    Return<ImmortalLongExact[1]> v5
  }
}
--- Test Name ---
IfIsinstanceEmitsLoadFieldAndIsInstance
--- Input ---
def test(x):
  if isinstance(x, str):
    return 1
  return 2
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v7:Object = LoadArg<0; "x">
    v8:OptObject = LoadGlobalCached<0; "isinstance">
    v9:MortalObjectUser[builtin_function_or_method:isinstance:0xdeadbeef] = GuardIs<0xdeadbeef> v8 {
      Descr 'LOAD_GLOBAL: isinstance'
      LiveValues<2> b:v7 b:v8
      FrameState {
        NextInstrOffset 0
        Locals<1> v7
      }
    }
    v11:OptObject = LoadGlobalCached<1; "str">
    v12:ImmortalTypeExact[str:obj] = GuardIs<0xdeadbeef> v11 {
      Descr 'LOAD_GLOBAL: str'
      LiveValues<3> b:v7 b:v9 b:v11
      FrameState {
        NextInstrOffset 2
        Locals<1> v7
        Stack<1> v9
      }
    }
    v17:Type = LoadField<ob_type@8, Type, borrowed> v7
    v18:CBool = PrimitiveCompare<Equal> v17 v12
    CondBranch<3, 4> v18
  }

  bb 3 (preds 0) {
    v19:Bool = PrimitiveBoxBool v18
    Branch<5>
  }

  bb 4 (preds 0) {
    v20:CInt32 = IsInstance v7 v12 {
      LiveValues<2> b:v7 unc:v12
      FrameState {
        NextInstrOffset 8
        Locals<1> v7
      }
    }
    v21:CInt32[1] = LoadConst<CInt32[1]>
    v22:CBool = PrimitiveCompare<Equal> v20 v21
    v23:Bool = PrimitiveBoxBool v22
    Branch<5>
  }

  bb 5 (preds 3, 4) {
    v24:Bool = Phi<3, 4> v19 v23
    v25:ImmortalBool[True] = LoadConst<ImmortalBool[True]>
    v26:CBool = PrimitiveCompare<Equal> v24 v25
    CondBranch<1, 2> v26
  }

  bb 1 (preds 5) {
    v15:ImmortalLongExact[1] = LoadConst<ImmortalLongExact[1]>
    Return v15
  }

  bb 2 (preds 5) {
    v16:ImmortalLongExact[2] = LoadConst<ImmortalLongExact[2]>
    Return v16
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v7:Object = LoadArg<0; "x">
    v8:OptObject = LoadGlobalCached<0; "isinstance">
    v9:MortalObjectUser[builtin_function_or_method:isinstance:0xdeadbeef] = GuardIs<0xdeadbeef> v8 {
      Descr 'LOAD_GLOBAL: isinstance'
      LiveValues<2> b:v7 b:v8
      FrameState {
        NextInstrOffset 0
        Locals<1> v7
      }
    }
    v11:OptObject = LoadGlobalCached<1; "str">
    v12:ImmortalTypeExact[str:obj] = GuardIs<0xdeadbeef> v11 {
      Descr 'LOAD_GLOBAL: str'
      LiveValues<3> b:v7 b:v9 b:v11
      FrameState {
        NextInstrOffset 2
        Locals<1> v7
        Stack<1> v9
      }
    }
    v17:Type = LoadField<ob_type@8, Type, borrowed> v7
    v18:CBool = PrimitiveCompare<Equal> v17 v12
    CondBranch<3, 4> v18
  }

  bb 3 (preds 0) {
    v19:Bool = PrimitiveBoxBool v18
    Branch<5>
  }

  bb 4 (preds 0) {
    v20:CInt32 = IsInstance v7 v12 {
      LiveValues<2> b:v7 unc:v12
      FrameState {
        NextInstrOffset 8
        Locals<1> v7
      }
    }
    v21:CInt32[1] = LoadConst<CInt32[1]>
    v22:CBool = PrimitiveCompare<Equal> v20 v21
    v23:Bool = PrimitiveBoxBool v22
    Branch<5>
  }

  bb 5 (preds 3, 4) {
    v24:Bool = Phi<3, 4> v19 v23
    v25:ImmortalBool[True] = LoadConst<ImmortalBool[True]>
    v26:CBool = PrimitiveCompare<Equal> v24 v25
    CondBranch<1, 2> v26
  }

  bb 1 (preds 5) {
    v15:ImmortalLongExact[1] = LoadConst<ImmortalLongExact[1]>
    Return v15
  }

  bb 2 (preds 5) {
    v16:ImmortalLongExact[2] = LoadConst<ImmortalLongExact[2]>
    Return v16
  }
}
--- Test Name ---
LenReturnsLongExact
--- Input ---
g = [1,2,3]
def test():
  return len(g)
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v3:OptObject = LoadGlobalCached<0; "len">
    v4:MortalObjectUser[builtin_function_or_method:len:0xdeadbeef] = GuardIs<0xdeadbeef> v3 {
      Descr 'LOAD_GLOBAL: len'
      LiveValues<1> b:v3
      FrameState {
        NextInstrOffset 0
      }
    }
    v5:OptObject = LoadGlobalCached<1; "g">
    v6:MortalListExact[list:0xdeadbeef] = GuardIs<0xdeadbeef> v5 {
      Descr 'LOAD_GLOBAL: g'
      LiveValues<2> b:v4 b:v5
      FrameState {
        NextInstrOffset 2
        Stack<1> v4
      }
    }
    v9:CInt64 = LoadField<ob_size@16, CInt64, borrowed> v6
    v10:LongExact = PrimitiveBox<CInt64> v9 {
      LiveValues<1> s:v9
      FrameState {
        NextInstrOffset 6
      }
    }
    Return v10
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v3:OptObject = LoadGlobalCached<0; "len">
    v4:MortalObjectUser[builtin_function_or_method:len:0xdeadbeef] = GuardIs<0xdeadbeef> v3 {
      Descr 'LOAD_GLOBAL: len'
      LiveValues<1> b:v3
      FrameState {
        NextInstrOffset 0
      }
    }
    v5:OptObject = LoadGlobalCached<1; "g">
    v6:MortalListExact[list:0xdeadbeef] = GuardIs<0xdeadbeef> v5 {
      Descr 'LOAD_GLOBAL: g'
      LiveValues<2> b:v4 b:v5
      FrameState {
        NextInstrOffset 2
        Stack<1> v4
      }
    }
    v9:CInt64 = LoadField<ob_size@16, CInt64, borrowed> v6
    v10:LongExact = PrimitiveBox<CInt64> v9 {
      LiveValues<1> s:v9
      FrameState {
        NextInstrOffset 6
      }
    }
    Return v10
  }
}
--- Test Name ---
HasattrReturnsBool
--- Input ---
def test(obj):
    return hasattr(obj, "foo")
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v4:Object = LoadArg<0; "obj">
    v5:OptObject = LoadGlobalCached<0; "hasattr">
    v6:MortalObjectUser[builtin_function_or_method:hasattr:0xdeadbeef] = GuardIs<0xdeadbeef> v5 {
      Descr 'LOAD_GLOBAL: hasattr'
      LiveValues<2> b:v4 b:v5
      FrameState {
        NextInstrOffset 0
        Locals<1> v4
      }
    }
    v8:MortalUnicodeExact["foo"] = LoadConst<MortalUnicodeExact["foo"]>
    v9:Bool = VectorCall<2> v6 v4 v8 {
      LiveValues<3> b:v4 b:v6 b:v8
      FrameState {
        NextInstrOffset 8
        Locals<1> v4
      }
    }
    Return v9
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v4:Object = LoadArg<0; "obj">
    v5:OptObject = LoadGlobalCached<0; "hasattr">
    v6:MortalObjectUser[builtin_function_or_method:hasattr:0xdeadbeef] = GuardIs<0xdeadbeef> v5 {
      Descr 'LOAD_GLOBAL: hasattr'
      LiveValues<2> b:v4 b:v5
      FrameState {
        NextInstrOffset 0
        Locals<1> v4
      }
    }
    v8:MortalUnicodeExact["foo"] = LoadConst<MortalUnicodeExact["foo"]>
    v9:Bool = VectorCall<2> v6 v4 v8 {
      LiveValues<3> b:v4 b:v6 b:v8
      FrameState {
        NextInstrOffset 8
        Locals<1> v4
      }
    }
    Return v9
  }
}
--- Test Name ---
CompareInReturnsBool
--- Input ---
def test(x, y):
  return x in y
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v3:Object = LoadArg<0; "x">
    v4:Object = LoadArg<1; "y">
    v7:Bool = Compare<In> v3 v4 {
      LiveValues<2> b:v3 b:v4
      FrameState {
        NextInstrOffset 6
        Locals<2> v3 v4
      }
    }
    Return v7
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v5:Object = LoadArg<0; "x">
    v6:Object = LoadArg<1; "y">
    v7:CInt32 = LoadEvalBreaker
    CondBranch<2, 1> v7
  }

  bb 2 (preds 0) {
    v8:CInt32 = RunPeriodicTasks {
      LiveValues<2> b:v5 b:v6
      FrameState {
        NextInstrOffset 2
        Locals<2> v5 v6
      }
    }
    Branch<1>
  }

  bb 1 (preds 0, 2) {
    v13:Bool = Compare<In> v5 v6 {
      LiveValues<2> b:v5 b:v6
      FrameState {
        NextInstrOffset 8
        Locals<2> v5 v6
      }
    }
    Return v13
  }
}
--- Test Name ---
CompareNotInReturnsBool
--- Input ---
def test(x, y):
  return x not in y
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v3:Object = LoadArg<0; "x">
    v4:Object = LoadArg<1; "y">
    v7:Bool = Compare<NotIn> v3 v4 {
      LiveValues<2> b:v3 b:v4
      FrameState {
        NextInstrOffset 6
        Locals<2> v3 v4
      }
    }
    Return v7
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v5:Object = LoadArg<0; "x">
    v6:Object = LoadArg<1; "y">
    v7:CInt32 = LoadEvalBreaker
    CondBranch<2, 1> v7
  }

  bb 2 (preds 0) {
    v8:CInt32 = RunPeriodicTasks {
      LiveValues<2> b:v5 b:v6
      FrameState {
        NextInstrOffset 2
        Locals<2> v5 v6
      }
    }
    Branch<1>
  }

  bb 1 (preds 0, 2) {
    v13:Bool = Compare<NotIn> v5 v6 {
      LiveValues<2> b:v5 b:v6
      FrameState {
        NextInstrOffset 8
        Locals<2> v5 v6
      }
    }
    Return v13
  }
}
--- Test Name ---
ListAppendMethodEmitsListAppend
--- Input ---
def test():
  x = []
  x.append(1)
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v7:Nullptr = LoadConst<Nullptr>
    v8:MortalListExact = MakeList<0> {
      LiveValues<1> unc:v7
      FrameState {
        NextInstrOffset 2
        Locals<1> v7
      }
    }
    v13:ImmortalLongExact[1] = LoadConst<ImmortalLongExact[1]>
    v17:CInt32 = ListAppend v8 v13 {
      LiveValues<2> o:v8 unc:v13
      FrameState {
        NextInstrOffset 12
        Locals<1> v8
      }
    }
    Decref v8
    v15:NoneType = LoadConst<NoneType>
    Incref v15
    Return v15
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v7:Nullptr = LoadConst<Nullptr>
    v8:MortalListExact = MakeList<0> {
      LiveValues<1> unc:v7
      FrameState {
        NextInstrOffset 2
        Locals<1> v7
      }
    }
    v13:ImmortalLongExact[1] = LoadConst<ImmortalLongExact[1]>
    v17:CInt32 = ListAppend v8 v13 {
      LiveValues<2> o:v8 unc:v13
      FrameState {
        NextInstrOffset 12
        Locals<1> v8
      }
    }
    Decref v8
    v15:NoneType = LoadConst<NoneType>
    Incref v15
    Return v15
  }
}
--- Test Name ---
AwaitedVectorCallStaticEmitsVectorCallStatic
--- Input ---
async def test():
  s = "abc"
  return await s.lower()
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v12:Nullptr = LoadConst<Nullptr>
    v13:OptNoneType = InitialYield {
      LiveValues<1> unc:v12
      FrameState {
        NextInstrOffset 0
        Locals<1> v12
      }
    }
    v14:MortalUnicodeExact["abc"] = LoadConst<MortalUnicodeExact["abc"]>
    v34:MortalObjectUser[method_descriptor:0xdeadbeef] = LoadConst<MortalObjectUser[method_descriptor:0xdeadbeef]>
    v19:UnicodeExact = VectorCallStatic<1, awaited> v34 v14 {
      LiveValues<2> b:v14 b:v34
      FrameState {
        NextInstrOffset 12
        Locals<1> v14
      }
    }
    v24:OptObject = CallCFunc<Cix_PyCoro_GetAwaitableIter> v19
    Decref v19
    v25:Object = CheckExc v24 {
      LiveValues<2> b:v14 o:v24
      FrameState {
        NextInstrOffset 12
        Locals<1> v14
      }
    }
    CondBranchCheckType<7, 8, ObjectUser[coroutine:Exact]> v25
  }

  bb 7 (preds 0) {
    v26:OptObject = CallCFunc<Cix_PyGen_yf> v25
    CondBranch<9, 8> v26
  }

  bb 9 (preds 7) {
    Decref v25
    XDecref v26
    RaiseStatic<RuntimeError, "coroutine is being awaited already", <<1> b:v14>> {
      LiveValues<1> b:v14
      FrameState {
        NextInstrOffset 12
        Locals<1> v14
      }
    }
  }

  bb 8 (preds 0, 7) {
    v27:NoneType = LoadConst<NoneType>
    SetCurrentAwaiter v25
    v30:Object = YieldFrom v27 v25 {
      LiveValues<3> b:v14 o:v25 b:v27
      FrameState {
        NextInstrOffset 12
        Locals<1> v14
        Stack<1> v25
      }
    }
    Decref v25
    Return v30
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v12:Nullptr = LoadConst<Nullptr>
    v13:OptNoneType = InitialYield {
      LiveValues<1> unc:v12
      FrameState {
        NextInstrOffset 0
        Locals<1> v12
      }
    }
    v14:MortalUnicodeExact["abc"] = LoadConst<MortalUnicodeExact["abc"]>
    v34:MortalObjectUser[method_descriptor:0xdeadbeef] = LoadConst<MortalObjectUser[method_descriptor:0xdeadbeef]>
    v19:UnicodeExact = VectorCallStatic<1, awaited> v34 v14 {
      LiveValues<2> b:v14 b:v34
      FrameState {
        NextInstrOffset 12
        Locals<1> v14
      }
    }
    v24:OptObject = CallCFunc<Cix_PyCoro_GetAwaitableIter> v19
    Decref v19
    v25:Object = CheckExc v24 {
      LiveValues<2> b:v14 o:v24
      FrameState {
        NextInstrOffset 12
        Locals<1> v14
      }
    }
    CondBranchCheckType<7, 8, ObjectUser[coroutine:Exact]> v25
  }

  bb 7 (preds 0) {
    v26:OptObject = CallCFunc<Cix_PyGen_yf> v25
    CondBranch<9, 8> v26
  }

  bb 9 (preds 7) {
    Decref v25
    XDecref v26
    RaiseStatic<RuntimeError, "coroutine is being awaited already", <<1> b:v14>> {
      LiveValues<1> b:v14
      FrameState {
        NextInstrOffset 12
        Locals<1> v14
      }
    }
  }

  bb 8 (preds 0, 7) {
    v27:NoneType = LoadConst<NoneType>
    SetCurrentAwaiter v25
    v30:Object = YieldFrom v27 v25 {
      LiveValues<3> b:v14 o:v25 b:v27
      FrameState {
        NextInstrOffset 12
        Locals<1> v14
        Stack<1> v25
      }
    }
    Decref v25
    Return v30
  }
}
--- Test Name ---
UnicodeLowerWithMismatchedArgcountEmitsVectorCallStatic
--- Input ---
def test():
  s = "abc"
  return s.lower(1)
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v7:MortalUnicodeExact["abc"] = LoadConst<MortalUnicodeExact["abc"]>
    v14:MortalObjectUser[method_descriptor:0xdeadbeef] = LoadConst<MortalObjectUser[method_descriptor:0xdeadbeef]>
    v12:ImmortalLongExact[1] = LoadConst<ImmortalLongExact[1]>
    v13:UnicodeExact = VectorCallStatic<2> v14 v7 v12 {
      LiveValues<3> b:v7 unc:v12 b:v14
      FrameState {
        NextInstrOffset 12
        Locals<1> v7
      }
    }
    Return v13
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v7:MortalUnicodeExact["abc"] = LoadConst<MortalUnicodeExact["abc"]>
    v14:MortalObjectUser[method_descriptor:0xdeadbeef] = LoadConst<MortalObjectUser[method_descriptor:0xdeadbeef]>
    v12:ImmortalLongExact[1] = LoadConst<ImmortalLongExact[1]>
    v13:UnicodeExact = VectorCallStatic<2> v14 v7 v12 {
      LiveValues<3> b:v7 unc:v12 b:v14
      FrameState {
        NextInstrOffset 12
        Locals<1> v7
      }
    }
    Return v13
  }
}
--- Test Name ---
UnicodeLowerEmitsCallStatic
--- Input ---
def test():
  s = "abc"
  return s.lower()
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v6:MortalUnicodeExact["abc"] = LoadConst<MortalUnicodeExact["abc"]>
    v13:OptUnicodeExact = CallStatic<unicode_lower@0xdeadbeef, 1> v6
    v14:UnicodeExact = CheckExc v13 {
      LiveValues<2> b:v6 o:v13
      FrameState {
        NextInstrOffset 10
        Locals<1> v6
      }
    }
    Return v14
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v6:MortalUnicodeExact["abc"] = LoadConst<MortalUnicodeExact["abc"]>
    v13:OptUnicodeExact = CallStatic<unicode_lower@0xdeadbeef, 1> v6
    v14:UnicodeExact = CheckExc v13 {
      LiveValues<2> b:v6 o:v13
      FrameState {
        NextInstrOffset 10
        Locals<1> v6
      }
    }
    Return v14
  }
}
--- Test Name ---
UnicodeRemovePrefixWithMismatchedArgcountEmitsVectorCallStatic
--- Input ---
def test():
  s = "abc"
  return s.removeprefix()
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v6:MortalUnicodeExact["abc"] = LoadConst<MortalUnicodeExact["abc"]>
    v12:MortalObjectUser[method_descriptor:0xdeadbeef] = LoadConst<MortalObjectUser[method_descriptor:0xdeadbeef]>
    v11:Object = VectorCallStatic<1> v12 v6 {
      LiveValues<2> b:v6 b:v12
      FrameState {
        NextInstrOffset 10
        Locals<1> v6
      }
    }
    Return v11
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v6:MortalUnicodeExact["abc"] = LoadConst<MortalUnicodeExact["abc"]>
    v12:MortalObjectUser[method_descriptor:0xdeadbeef] = LoadConst<MortalObjectUser[method_descriptor:0xdeadbeef]>
    v11:Object = VectorCallStatic<1> v12 v6 {
      LiveValues<2> b:v6 b:v12
      FrameState {
        NextInstrOffset 10
        Locals<1> v6
      }
    }
    Return v11
  }
}
--- Test Name ---
UnicodeRemovePrefixEmitsCallStatic
--- Input ---
def test():
  s = "abc"
  return s.removeprefix("a")
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    v7:MortalUnicodeExact["abc"] = LoadConst<MortalUnicodeExact["abc"]>
    v12:MortalUnicodeExact["a"] = LoadConst<MortalUnicodeExact["a"]>
    v15:OptObject = CallStatic<unicode_removeprefix@0xdeadbeef, 2> v7 v12
    v16:Object = CheckExc v15 {
      LiveValues<2> b:v7 o:v15
      FrameState {
        NextInstrOffset 12
        Locals<1> v7
      }
    }
    Return v16
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v7:MortalUnicodeExact["abc"] = LoadConst<MortalUnicodeExact["abc"]>
    v12:MortalUnicodeExact["a"] = LoadConst<MortalUnicodeExact["a"]>
    v15:OptObject = CallStatic<unicode_removeprefix@0xdeadbeef, 2> v7 v12
    v16:Object = CheckExc v15 {
      LiveValues<2> b:v7 o:v15
      FrameState {
        NextInstrOffset 12
        Locals<1> v7
      }
    }
    Return v16
  }
}
--- End ---
