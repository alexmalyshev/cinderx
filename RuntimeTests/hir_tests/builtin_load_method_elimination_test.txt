BuiltinLoadMethodEliminationTest
---
BuiltinLoadMethodElimination
---
LoadMethodCallMethodOnStrInstanceIsRewrittenToVectorCallStatic
---
def test():
    return "Hello".upper()
---
fun jittestmodule:test {
  bb 0 {
    Snapshot
    v4:MortalUnicodeExact["Hello"] = LoadConst<MortalUnicodeExact["Hello"]>
    UseType<MortalUnicodeExact> v4
    v8:MortalObjectUser[method_descriptor:0xdeadbeef] = LoadConst<MortalObjectUser[method_descriptor:0xdeadbeef]>
    v6:MortalUnicodeExact["Hello"] = Assign v4
    Snapshot
    v7:UnicodeExact = VectorCallStatic<1> v8 v4 {
      FrameState {
        NextInstrOffset 6
      }
    }
    Snapshot
    Return v7
  }
}
---
LoadMethodCallMethodOnStrInstanceWithArgsIsRewrittenToVectorCallStatic
---
def test(seq):
    return ",".join(seq)
---
fun jittestmodule:test {
  bb 0 {
    v5:Object = LoadArg<0; "seq">
    Snapshot
    v6:MortalUnicodeExact[","] = LoadConst<MortalUnicodeExact[","]>
    UseType<MortalUnicodeExact> v6
    v11:MortalObjectUser[method_descriptor:0xdeadbeef] = LoadConst<MortalObjectUser[method_descriptor:0xdeadbeef]>
    v8:MortalUnicodeExact[","] = Assign v6
    Snapshot
    v10:UnicodeExact = VectorCallStatic<2> v11 v6 v5 {
      FrameState {
        NextInstrOffset 8
        Locals<1> v5
      }
    }
    Snapshot
    Return v10
  }
}
---
LoadMethodCallMethodOnNonObjSpecStrInstanceWithArgsIsRewrittenToVectorCallStatic
---
def test(seq, use_comma):
    if use_comma:
        sep = ","
    else:
        sep = "."
    return sep.join(seq)
---
fun jittestmodule:test {
  bb 0 {
    v9:Object = LoadArg<0; "seq">
    v10:Object = LoadArg<1; "use_comma">
    v11:Nullptr = LoadConst<Nullptr>
    Snapshot
    v13:CInt32 = IsTruthy v10 {
      FrameState {
        NextInstrOffset 4
        Locals<3> v9 v10 v11
      }
    }
    CondBranch<1, 2> v13
  }

  bb 1 (preds 0) {
    Snapshot
    v14:MortalUnicodeExact[","] = LoadConst<MortalUnicodeExact[","]>
    Branch<3>
  }

  bb 2 (preds 0) {
    Snapshot
    v16:MortalUnicodeExact["."] = LoadConst<MortalUnicodeExact["."]>
    Branch<3>
  }

  bb 3 (preds 1, 2) {
    v20:MortalUnicodeExact = Phi<1, 2> v14 v16
    Snapshot
    UseType<MortalUnicodeExact> v20
    v26:MortalObjectUser[method_descriptor:0xdeadbeef] = LoadConst<MortalObjectUser[method_descriptor:0xdeadbeef]>
    v23:MortalUnicodeExact = Assign v20
    Snapshot
    v25:UnicodeExact = VectorCallStatic<2> v26 v20 v9 {
      FrameState {
        NextInstrOffset 22
        Locals<3> v9 v10 v20
      }
    }
    Snapshot
    Return v25
  }
}
---
NestedCallMethod
---
def test(name):
    return "{}.{}".format(name, name.upper())
---
fun jittestmodule:test {
  bb 0 {
    v8:Object = LoadArg<0; "name">
    Snapshot
    v9:MortalUnicodeExact["{}.{}"] = LoadConst<MortalUnicodeExact["{}.{}"]>
    UseType<MortalUnicodeExact> v9
    v18:MortalObjectUser[method_descriptor:0xdeadbeef] = LoadConst<MortalObjectUser[method_descriptor:0xdeadbeef]>
    v11:MortalUnicodeExact["{}.{}"] = Assign v9
    Snapshot
    v19:Object = LoadMethodCached<1; "upper"> v8 {
      FrameState {
        NextInstrOffset 10
        Locals<1> v8
        Stack<3> v18 v11 v8
      }
    }
    v15:OptObject = GetSecondOutput<OptObject> v19
    Snapshot
    v16:Object = CallMethod<2> v19 v15 {
      FrameState {
        NextInstrOffset 12
        Locals<1> v8
        Stack<3> v18 v11 v8
      }
    }
    Snapshot
    v17:UnicodeExact = VectorCallStatic<3> v18 v9 v8 v16 {
      FrameState {
        NextInstrOffset 14
        Locals<1> v8
      }
    }
    Snapshot
    Return v17
  }
}
---
ChainedCallMethod
---
def test():
  return "x".lower().upper()
---
fun jittestmodule:test {
  bb 0 {
    Snapshot
    v7:MortalUnicodeExact["x"] = LoadConst<MortalUnicodeExact["x"]>
    UseType<MortalUnicodeExact> v7
    v14:MortalObjectUser[method_descriptor:0xdeadbeef] = LoadConst<MortalObjectUser[method_descriptor:0xdeadbeef]>
    v9:MortalUnicodeExact["x"] = Assign v7
    Snapshot
    v10:UnicodeExact = VectorCallStatic<1> v14 v7 {
      FrameState {
        NextInstrOffset 6
      }
    }
    Snapshot
    UseType<UnicodeExact> v10
    v15:MortalObjectUser[method_descriptor:0xdeadbeef] = LoadConst<MortalObjectUser[method_descriptor:0xdeadbeef]>
    v12:UnicodeExact = Assign v10
    Snapshot
    v13:UnicodeExact = VectorCallStatic<1> v15 v10 {
      FrameState {
        NextInstrOffset 10
      }
    }
    Snapshot
    Return v13
  }
}
---
LoadMethodCallMethodAwaitedTurnsIntoVectorCallStaticAwaited
---
async def test():
    return await "Hello".upper()
---
fun jittestmodule:test {
  bb 0 {
    v11:OptNoneType = InitialYield {
      FrameState {
        NextInstrOffset 0
      }
    }
    Snapshot
    v12:MortalUnicodeExact["Hello"] = LoadConst<MortalUnicodeExact["Hello"]>
    UseType<MortalUnicodeExact> v12
    v28:MortalObjectUser[method_descriptor:0xdeadbeef] = LoadConst<MortalObjectUser[method_descriptor:0xdeadbeef]>
    v14:MortalUnicodeExact["Hello"] = Assign v12
    Snapshot
    v15:UnicodeExact = VectorCallStatic<1, awaited> v28 v12 {
      FrameState {
        NextInstrOffset 8
      }
    }
    CondBranchCheckType<4, 2, WaitHandle> v15
  }

  bb 4 (preds 0) {
    v16:Object = WaitHandleLoadCoroOrResult v15
    v17:OptObject = WaitHandleLoadWaiter v15
    WaitHandleRelease v15
    CondBranch<5, 6> v17
  }

  bb 5 (preds 4) {
    SetCurrentAwaiter v16
    v18:Object = YieldAndYieldFrom v17 v16 {
      FrameState {
        NextInstrOffset 8
        Stack<1> v15
      }
    }
    Branch<3>
  }

  bb 6 (preds 4) {
    Branch<3>
  }

  bb 2 (preds 0) {
    v20:OptObject = CallCFunc<_PyCoro_GetAwaitableIter> v15
    v21:Object = CheckExc v20 {
      FrameState {
        NextInstrOffset 8
      }
    }
    CondBranchCheckType<7, 8, ObjectUser[coroutine:Exact]> v21
  }

  bb 7 (preds 2) {
    v22:OptObject = CallCFunc<_PyGen_yf> v21
    CondBranch<9, 8> v22
  }

  bb 9 (preds 7) {
    RaiseStatic<RuntimeError, "coroutine is being awaited already", <<0>>> {
      FrameState {
        NextInstrOffset 8
      }
    }
  }

  bb 8 (preds 2, 7) {
    v23:NoneType = LoadConst<NoneType>
    SetCurrentAwaiter v21
    v25:Object = YieldFrom v23 v21 {
      FrameState {
        NextInstrOffset 8
        Stack<1> v21
      }
    }
    Branch<3>
  }

  bb 3 (preds 5, 6, 8) {
    v26:Object = Phi<5, 6, 8> v18 v16 v25
    Snapshot
    Snapshot
    Return v26
  }
}
---
LoadMethodOnTypeObjectBecomesCachedWithoutLoadMethodElimination
---
def test():
    return str.upper("Hello")
---
fun jittestmodule:test {
  bb 0 {
    Snapshot
    v5:OptObject = LoadGlobalCached<0; "str">
    v6:ImmortalTypeExact[str:obj] = GuardIs<0xdeadbeef> v5 {
      Descr 'LOAD_GLOBAL: str'
    }
    Snapshot
    UseType<Type> v6
    v11:OptType = LoadTypeMethodCacheEntryType<0>
    v12:CBool = PrimitiveCompare<Equal> v11 v6
    CondBranch<1, 2> v12
  }

  bb 1 (preds 0) {
    v13:Object = LoadTypeMethodCacheEntryValue<0> v6
    Branch<3>
  }

  bb 2 (preds 0) {
    v14:Object = FillTypeMethodCache<0, 1> v6 {
      FrameState {
        NextInstrOffset 4
      }
    }
    Branch<3>
  }

  bb 3 (preds 1, 2) {
    v15:Object = Phi<1, 2> v13 v14
    v8:OptObject = GetSecondOutput<OptObject> v15
    Snapshot
    v9:MortalUnicodeExact["Hello"] = LoadConst<MortalUnicodeExact["Hello"]>
    v10:Object = CallMethod<3> v15 v8 v9 {
      FrameState {
        NextInstrOffset 8
      }
    }
    Snapshot
    Return v10
  }
}
---
LoadMethodWithUnknownMethodDoesNotChange
---
def test():
    return "hello".unknown()
---
fun jittestmodule:test {
  bb 0 {
    Snapshot
    v4:MortalUnicodeExact["hello"] = LoadConst<MortalUnicodeExact["hello"]>
    v8:Object = LoadMethodCached<0; "unknown"> v4 {
      FrameState {
        NextInstrOffset 4
      }
    }
    v6:OptObject = GetSecondOutput<OptObject> v8
    Snapshot
    v7:Object = CallMethod<2> v8 v6 {
      FrameState {
        NextInstrOffset 6
      }
    }
    Snapshot
    Return v7
  }
}
---
LoadMethodWithMethClassPassesType
---
def test():
    return b"".fromhex("FF")
---
fun jittestmodule:test {
  bb 0 {
    Snapshot
    v5:MortalBytesExact[''] = LoadConst<MortalBytesExact['']>
    UseType<MortalBytesExact> v5
    v10:MortalObjectUser[classmethod_descriptor:0xdeadbeef] = LoadConst<MortalObjectUser[classmethod_descriptor:0xdeadbeef]>
    v7:MortalBytesExact[''] = Assign v5
    Snapshot
    v8:MortalUnicodeExact["FF"] = LoadConst<MortalUnicodeExact["FF"]>
    v11:ImmortalTypeExact[bytes:obj] = LoadConst<ImmortalTypeExact[bytes:obj]>
    v9:Object = VectorCallStatic<2> v10 v11 v8 {
      FrameState {
        NextInstrOffset 8
      }
    }
    Snapshot
    Return v9
  }
}
---
LoadMethodWithWrapperDescrPassesInstance
---
def test():
    return "%s".__mod__(1)
---
fun jittestmodule:test {
  bb 0 {
    Snapshot
    v5:MortalUnicodeExact["%s"] = LoadConst<MortalUnicodeExact["%s"]>
    UseType<MortalUnicodeExact> v5
    v10:MortalObjectUser[wrapper_descriptor:0xdeadbeef] = LoadConst<MortalObjectUser[wrapper_descriptor:0xdeadbeef]>
    v7:MortalUnicodeExact["%s"] = Assign v5
    Snapshot
    v8:ImmortalLongExact[1] = LoadConst<ImmortalLongExact[1]>
    v9:Object = VectorCallStatic<2> v10 v5 v8 {
      FrameState {
        NextInstrOffset 8
      }
    }
    Snapshot
    Return v9
  }
}
---
