InlinerStaticTest
---
InlineFunctionCalls
Simplify
---
InvokeStaticFunctionWithNoArgs
---
def foo():
    # Chosen by fair dice roll. Guaranteed to be random.
    return 4

def test():
    return foo()
---
fun jittestmodule:test {
  bb 0 {
    Snapshot
    v2:MortalFunc[function:0xdeadbeef] = LoadConst<MortalFunc[function:0xdeadbeef]>
    BeginInlinedFunction<jittestmodule:foo> {
      NextInstrOffset 4
    }
    Snapshot
    v6:ImmortalLongExact[4] = LoadConst<ImmortalLongExact[4]>
    EndInlinedFunction
    Snapshot
    Return v6
  }
}
---
InvokeStaticFunctionWithArgs
---
def foo(x: int, y: int) -> int:
    # Chosen by fair dice roll. Guaranteed to be random.
    return x + y

def test():
    return foo(1, 2)
---
fun jittestmodule:test {
  bb 0 {
    Snapshot
    v4:ImmortalLongExact[1] = LoadConst<ImmortalLongExact[1]>
    v5:ImmortalLongExact[2] = LoadConst<ImmortalLongExact[2]>
    v6:MortalFunc[function:0xdeadbeef] = LoadConst<MortalFunc[function:0xdeadbeef]>
    BeginInlinedFunction<jittestmodule:foo> {
      NextInstrOffset 8
    }
    Snapshot
    UseType<LongExact> v4
    UseType<LongExact> v5
    UseType<ImmortalLongExact[1]> v4
    UseType<ImmortalLongExact[2]> v5
    v21:ImmortalLongExact[3] = LoadConst<ImmortalLongExact[3]>
    Snapshot
    Snapshot
    EndInlinedFunction
    Snapshot
    Return v21
  }
}
---
InvokeStaticFunctionReturningCType
---
from __static__ import int8

def foo() -> int8:
    # Chosen by fair dice roll. Guaranteed to be random.
    return 4

def test() -> int8:
    return foo()
---
fun jittestmodule:test {
  bb 0 {
    Snapshot
    v2:MortalFunc[function:0xdeadbeef] = LoadConst<MortalFunc[function:0xdeadbeef]>
    BeginInlinedFunction<jittestmodule:foo> {
      NextInstrOffset 4
    }
    Snapshot
    v6:CInt8[4] = LoadConst<CInt8[4]>
    EndInlinedFunction
    Snapshot
    Return<CInt8> v6
  }
}
---
CalleeWithNonPrimitiveReturnHasObjectReturnType
---
def foo(x) -> bool:
    # isinstance is typed by SP as returning bool but returns object in the
    # JIT.
    return isinstance(x, bool)

def test(x):
    return foo(x)
---
fun jittestmodule:test {
  bb 0 {
    v3:Object = LoadArg<0; "x">
    Snapshot
    v5:MortalFunc[function:0xdeadbeef] = LoadConst<MortalFunc[function:0xdeadbeef]>
    BeginInlinedFunction<jittestmodule:foo> {
      NextInstrOffset 6
      Locals<1> v3
    }
    Snapshot
    v13:OptObject = LoadGlobalCached<0; "isinstance">
    v14:MortalObjectUser[builtin_function_or_method:isinstance:0xdeadbeef] = GuardIs<0xdeadbeef> v13 {
      Descr 'LOAD_GLOBAL: isinstance'
    }
    Snapshot
    v16:OptObject = LoadGlobalCached<1; "bool">
    v17:ImmortalTypeExact[bool:obj] = GuardIs<0xdeadbeef> v16 {
      Descr 'LOAD_GLOBAL: bool'
    }
    Snapshot
    v18:Object = VectorCall<2> v14 v3 v17 {
      FrameState {
        NextInstrOffset 8
        Locals<1> v3
      }
    }
    Snapshot
    EndInlinedFunction
    Snapshot
    Return v18
  }
}
---
