InlinerTest
---
InlineFunctionCalls
Simplify
---
Simple
---
def foo():
    # Chosen by fair dice roll. Guaranteed to be random.
    return 4

def test():
    return foo()
---
fun jittestmodule:test {
  bb 0 {
    Snapshot
    v2:OptObject = LoadGlobalCached<0; "foo">
    v3:MortalFunc[function:0xdeadbeef] = GuardIs<0xdeadbeef> v2 {
      Descr 'LOAD_GLOBAL: foo'
    }
    Snapshot
    v9:Object = LoadField<func_code@48, Object, borrowed> v3
    v10:MortalCode["foo"] = GuardIs<0xdeadbeef> v9 {
    }
    BeginInlinedFunction<jittestmodule:foo> {
      NextInstrOffset 4
    }
    Snapshot
    v7:ImmortalLongExact[4] = LoadConst<ImmortalLongExact[4]>
    EndInlinedFunction
    Snapshot
    Return v7
  }
}
---
InlineMultipleFunctions
---
def foo():
    return 3

def bar():
    return 4

def test():
    return foo() + bar()
---
fun jittestmodule:test {
  bb 0 {
    Snapshot
    v5:OptObject = LoadGlobalCached<0; "foo">
    v6:MortalFunc[function:0xdeadbeef] = GuardIs<0xdeadbeef> v5 {
      Descr 'LOAD_GLOBAL: foo'
    }
    Snapshot
    v16:Object = LoadField<func_code@48, Object, borrowed> v6
    v17:MortalCode["foo"] = GuardIs<0xdeadbeef> v16 {
    }
    BeginInlinedFunction<jittestmodule:foo> {
      NextInstrOffset 4
    }
    Snapshot
    v14:ImmortalLongExact[3] = LoadConst<ImmortalLongExact[3]>
    EndInlinedFunction
    Snapshot
    v8:OptObject = LoadGlobalCached<1; "bar">
    v9:MortalFunc[function:0xdeadbeef] = GuardIs<0xdeadbeef> v8 {
      Descr 'LOAD_GLOBAL: bar'
    }
    Snapshot
    v22:Object = LoadField<func_code@48, Object, borrowed> v9
    v23:MortalCode["bar"] = GuardIs<0xdeadbeef> v22 {
    }
    BeginInlinedFunction<jittestmodule:bar> {
      NextInstrOffset 8
      Stack<1> v14
    }
    Snapshot
    v20:ImmortalLongExact[4] = LoadConst<ImmortalLongExact[4]>
    EndInlinedFunction
    Snapshot
    UseType<LongExact> v14
    UseType<LongExact> v20
    UseType<ImmortalLongExact[3]> v14
    UseType<ImmortalLongExact[4]> v20
    v25:ImmortalLongExact[7] = LoadConst<ImmortalLongExact[7]>
    Snapshot
    Return v25
  }
}
---
TypesFromCallerFlowIntoCallee
---
def foo(left, right):
  return left[right]

def test():
    ls = [1, 2, 3]
    return foo(ls, 1)
---
fun jittestmodule:test {
  bb 0 {
    v7:Nullptr = LoadConst<Nullptr>
    Snapshot
    v8:MortalListExact = MakeList<0> {
      FrameState {
        NextInstrOffset 2
        Locals<1> v7
      }
    }
    Snapshot
    v9:MortalTupleExact[tuple:0xdeadbeef] = LoadConst<MortalTupleExact[tuple:0xdeadbeef]>
    v10:NoneType = ListExtend v8 v9 {
      FrameState {
        NextInstrOffset 6
        Locals<1> v7
        Stack<1> v8
      }
    }
    Snapshot
    v12:OptObject = LoadGlobalCached<0; "foo">
    v13:MortalFunc[function:0xdeadbeef] = GuardIs<0xdeadbeef> v12 {
      Descr 'LOAD_GLOBAL: foo'
    }
    Snapshot
    v15:ImmortalLongExact[1] = LoadConst<ImmortalLongExact[1]>
    v27:Object = LoadField<func_code@48, Object, borrowed> v13
    v28:MortalCode["foo"] = GuardIs<0xdeadbeef> v27 {
    }
    BeginInlinedFunction<jittestmodule:foo> {
      NextInstrOffset 16
      Locals<1> v8
    }
    Snapshot
    UseType<ListExact> v8
    UseType<LongExact> v15
    v34:CInt64[1] = LoadConst<CInt64[1]>
    v35:CInt64[0] = LoadConst<CInt64[0]>
    v31:CInt64 = CheckSequenceBounds v8 v34 {
      FrameState {
        NextInstrOffset 6
        Locals<2> v8 v15
      }
    }
    v32:CPtr = LoadField<ob_item@24, CPtr, borrowed> v8
    v33:Object = LoadArrayItem v32 v31 v8
    Snapshot
    EndInlinedFunction
    Snapshot
    Return v33
  }
}
---
PositionalArguments
---
def foo(left, right):
    return left + right

def test():
    return foo(2, 3)
---
fun jittestmodule:test {
  bb 0 {
    Snapshot
    v4:OptObject = LoadGlobalCached<0; "foo">
    v5:MortalFunc[function:0xdeadbeef] = GuardIs<0xdeadbeef> v4 {
      Descr 'LOAD_GLOBAL: foo'
    }
    Snapshot
    v6:ImmortalLongExact[2] = LoadConst<ImmortalLongExact[2]>
    v7:ImmortalLongExact[3] = LoadConst<ImmortalLongExact[3]>
    v19:Object = LoadField<func_code@48, Object, borrowed> v5
    v20:MortalCode["foo"] = GuardIs<0xdeadbeef> v19 {
    }
    BeginInlinedFunction<jittestmodule:foo> {
      NextInstrOffset 8
    }
    Snapshot
    UseType<LongExact> v6
    UseType<LongExact> v7
    UseType<ImmortalLongExact[2]> v6
    UseType<ImmortalLongExact[3]> v7
    v22:ImmortalLongExact[5] = LoadConst<ImmortalLongExact[5]>
    Snapshot
    EndInlinedFunction
    Snapshot
    Return v22
  }
}
---
CallWithTooManyArgsIsNotInlined
---
def foo():
    return 4

def test():
    return foo(1)
---
fun jittestmodule:test {
  bb 0 {
    Snapshot
    v3:OptObject = LoadGlobalCached<0; "foo">
    v4:MortalFunc[function:0xdeadbeef] = GuardIs<0xdeadbeef> v3 {
      Descr 'LOAD_GLOBAL: foo'
    }
    Snapshot
    v5:ImmortalLongExact[1] = LoadConst<ImmortalLongExact[1]>
    v6:Object = VectorCall<1> v4 v5 {
      FrameState {
        NextInstrOffset 6
      }
    }
    Snapshot
    Return v6
  }
}
---
CallWithTooFewArgsIsNotInlined
---
def foo(x):
  return 4

def test():
  return foo()
---
fun jittestmodule:test {
  bb 0 {
    Snapshot
    v2:OptObject = LoadGlobalCached<0; "foo">
    v3:MortalFunc[function:0xdeadbeef] = GuardIs<0xdeadbeef> v2 {
      Descr 'LOAD_GLOBAL: foo'
    }
    Snapshot
    v4:Object = VectorCall<0> v3 {
      FrameState {
        NextInstrOffset 4
      }
    }
    Snapshot
    Return v4
  }
}
---
CalleeWithStarArgs
---
def foo(*args):
    return args[0] + args[1]

def test():
    return foo(2, 3)
---
fun jittestmodule:test {
  bb 0 {
    Snapshot
    v4:OptObject = LoadGlobalCached<0; "foo">
    v5:MortalFunc[function:0xdeadbeef] = GuardIs<0xdeadbeef> v4 {
      Descr 'LOAD_GLOBAL: foo'
    }
    Snapshot
    v6:ImmortalLongExact[2] = LoadConst<ImmortalLongExact[2]>
    v7:ImmortalLongExact[3] = LoadConst<ImmortalLongExact[3]>
    v8:Object = VectorCall<2> v5 v6 v7 {
      FrameState {
        NextInstrOffset 8
      }
    }
    Snapshot
    Return v8
  }
}
---
CalleeWithKwargs
---
def foo(**kwargs):
    return 5

def test():
    return foo(2, 3)
---
fun jittestmodule:test {
  bb 0 {
    Snapshot
    v4:OptObject = LoadGlobalCached<0; "foo">
    v5:MortalFunc[function:0xdeadbeef] = GuardIs<0xdeadbeef> v4 {
      Descr 'LOAD_GLOBAL: foo'
    }
    Snapshot
    v6:ImmortalLongExact[2] = LoadConst<ImmortalLongExact[2]>
    v7:ImmortalLongExact[3] = LoadConst<ImmortalLongExact[3]>
    v8:Object = VectorCall<2> v5 v6 v7 {
      FrameState {
        NextInstrOffset 8
      }
    }
    Snapshot
    Return v8
  }
}
---
CalleeCoroutine
---
def foo():
  yield

def test():
    return foo()
---
fun jittestmodule:test {
  bb 0 {
    Snapshot
    v2:OptObject = LoadGlobalCached<0; "foo">
    v3:MortalFunc[function:0xdeadbeef] = GuardIs<0xdeadbeef> v2 {
      Descr 'LOAD_GLOBAL: foo'
    }
    Snapshot
    v4:Object = VectorCall<0> v3 {
      FrameState {
        NextInstrOffset 4
      }
    }
    Snapshot
    Return v4
  }
}
---
CalleeWithCellvars
---
def foo():
  local = 5
  def inside():
    return local
  return inside

def test():
    return foo()
---
fun jittestmodule:test {
  bb 0 {
    Snapshot
    v2:OptObject = LoadGlobalCached<0; "foo">
    v3:MortalFunc[function:0xdeadbeef] = GuardIs<0xdeadbeef> v2 {
      Descr 'LOAD_GLOBAL: foo'
    }
    Snapshot
    v4:Object = VectorCall<0> v3 {
      FrameState {
        NextInstrOffset 4
      }
    }
    Snapshot
    Return v4
  }
}
---
CalleeWithCellvars2
---
def test():
  local = 5
  def inside():
    return local
  return inside()
---
fun jittestmodule:test {
  bb 0 {
    v10:Nullptr = LoadConst<Nullptr>
    v11:MortalCell = MakeCell v10 {
      FrameState {
        NextInstrOffset 0
        Locals<1> v10
        Cells<1> v10
      }
    }
    Snapshot
    v12:ImmortalLongExact[5] = LoadConst<ImmortalLongExact[5]>
    v13:OptObject = StealCellItem v11
    SetCellItem v11 v12 v13
    Snapshot
    v14:MortalTupleExact = MakeTuple<1> v11 {
      FrameState {
        NextInstrOffset 8
        Locals<1> v10
        Cells<1> v11
        Stack<1> v11
      }
    }
    Snapshot
    v15:MortalCode["inside"] = LoadConst<MortalCode["inside"]>
    v16:MortalUnicodeExact["test.<locals>.inside"] = LoadConst<MortalUnicodeExact["test.<locals>.inside"]>
    v17:MortalFunc = MakeFunction v16 v15 {
      FrameState {
        NextInstrOffset 14
        Locals<1> v10
        Cells<1> v11
        Stack<1> v14
      }
    }
    SetFunctionAttr<func_closure> v14 v17
    Snapshot
    v20:Object = VectorCall<0> v17 {
      FrameState {
        NextInstrOffset 20
        Locals<1> v17
        Cells<1> v11
      }
    }
    Snapshot
    Return v20
  }
}
---
CalleeFunctionWithoutObjectSpec
---
def test():
  def inside():
    return 5
  return inside()
---
fun jittestmodule:test {
  bb 0 {
    v5:Nullptr = LoadConst<Nullptr>
    Snapshot
    v6:MortalCode["inside"] = LoadConst<MortalCode["inside"]>
    v7:MortalUnicodeExact["test.<locals>.inside"] = LoadConst<MortalUnicodeExact["test.<locals>.inside"]>
    v8:MortalFunc = MakeFunction v7 v6 {
      FrameState {
        NextInstrOffset 6
        Locals<1> v5
      }
    }
    Snapshot
    v11:Object = VectorCall<0> v8 {
      FrameState {
        NextInstrOffset 12
        Locals<1> v8
      }
    }
    Snapshot
    Return v11
  }
}
---
CalleeNonFunction
---
class C:
  def __call__(self):
    pass

foo = C()

def test():
    return foo()
---
fun jittestmodule:test {
  bb 0 {
    Snapshot
    v2:OptObject = LoadGlobalCached<0; "foo">
    v3:MortalObjectUser[C:0xdeadbeef] = GuardIs<0xdeadbeef> v2 {
      Descr 'LOAD_GLOBAL: foo'
    }
    Snapshot
    v4:Object = VectorCall<0> v3 {
      FrameState {
        NextInstrOffset 4
      }
    }
    Snapshot
    Return v4
  }
}
---
Recursive
---
def test(x):
  if x < 2:
    return 1
  return x * test(x - 1)
---
fun jittestmodule:test {
  bb 0 {
    v10:Object = LoadArg<0; "x">
    Snapshot
    v12:ImmortalLongExact[2] = LoadConst<ImmortalLongExact[2]>
    v13:Object = Compare<LessThan> v10 v12 {
      FrameState {
        NextInstrOffset 6
        Locals<1> v10
      }
    }
    Snapshot
    v14:CInt32 = IsTruthy v13 {
      FrameState {
        NextInstrOffset 8
        Locals<1> v10
      }
    }
    CondBranch<1, 2> v14
  }

  bb 1 (preds 0) {
    Snapshot
    v15:ImmortalLongExact[1] = LoadConst<ImmortalLongExact[1]>
    Return v15
  }

  bb 2 (preds 0) {
    Snapshot
    v17:OptObject = LoadGlobalCached<0; "test">
    v18:MortalFunc[function:0xdeadbeef] = GuardIs<0xdeadbeef> v17 {
      Descr 'LOAD_GLOBAL: test'
    }
    Snapshot
    v20:ImmortalLongExact[1] = LoadConst<ImmortalLongExact[1]>
    v21:Object = BinaryOp<Subtract> v10 v20 {
      FrameState {
        NextInstrOffset 22
        Locals<1> v10
        Stack<2> v10 v18
      }
    }
    Snapshot
    v52:Object = LoadField<func_code@48, Object, borrowed> v18
    v53:MortalCode["test"] = GuardIs<0xdeadbeef> v52 {
    }
    BeginInlinedFunction<jittestmodule:test> {
      NextInstrOffset 24
      Locals<1> v10
      Stack<1> v10
    }
    Snapshot
    v37:ImmortalLongExact[2] = LoadConst<ImmortalLongExact[2]>
    v38:Object = Compare<LessThan> v21 v37 {
      FrameState {
        NextInstrOffset 6
        Locals<1> v21
      }
    }
    Snapshot
    v39:CInt32 = IsTruthy v38 {
      FrameState {
        NextInstrOffset 8
        Locals<1> v21
      }
    }
    CondBranch<4, 5> v39
  }

  bb 4 (preds 2) {
    Snapshot
    v40:ImmortalLongExact[1] = LoadConst<ImmortalLongExact[1]>
    Branch<6>
  }

  bb 5 (preds 2) {
    Snapshot
    v43:OptObject = LoadGlobalCached<0; "test">
    v44:MortalFunc[function:0xdeadbeef] = GuardIs<0xdeadbeef> v43 {
      Descr 'LOAD_GLOBAL: test'
    }
    Snapshot
    v46:ImmortalLongExact[1] = LoadConst<ImmortalLongExact[1]>
    v47:Object = BinaryOp<Subtract> v21 v46 {
      FrameState {
        NextInstrOffset 22
        Locals<1> v21
        Stack<2> v21 v44
      }
    }
    Snapshot
    v48:Object = VectorCall<1> v44 v47 {
      FrameState {
        NextInstrOffset 24
        Locals<1> v21
        Stack<1> v21
      }
    }
    Snapshot
    v49:Object = BinaryOp<Multiply> v21 v48 {
      FrameState {
        NextInstrOffset 26
        Locals<1> v21
      }
    }
    Snapshot
    Branch<6>
  }

  bb 6 (preds 4, 5) {
    v51:Object = Phi<4, 5> v40 v49
    EndInlinedFunction
    Snapshot
    v23:Object = BinaryOp<Multiply> v10 v51 {
      FrameState {
        NextInstrOffset 26
        Locals<1> v10
      }
    }
    Snapshot
    Return v23
  }
}
---
CalleeWithUnusedDefaultsIsInlined
---
def foo(left=1, right=2):
  return left + right

def test():
  return foo(3, 4)
---
fun jittestmodule:test {
  bb 0 {
    Snapshot
    v4:OptObject = LoadGlobalCached<0; "foo">
    v5:MortalFunc[function:0xdeadbeef] = GuardIs<0xdeadbeef> v4 {
      Descr 'LOAD_GLOBAL: foo'
    }
    Snapshot
    v6:ImmortalLongExact[3] = LoadConst<ImmortalLongExact[3]>
    v7:ImmortalLongExact[4] = LoadConst<ImmortalLongExact[4]>
    v19:Object = LoadField<func_code@48, Object, borrowed> v5
    v20:MortalCode["foo"] = GuardIs<0xdeadbeef> v19 {
    }
    BeginInlinedFunction<jittestmodule:foo> {
      NextInstrOffset 8
    }
    Snapshot
    UseType<LongExact> v6
    UseType<LongExact> v7
    UseType<ImmortalLongExact[3]> v6
    UseType<ImmortalLongExact[4]> v7
    v22:ImmortalLongExact[7] = LoadConst<ImmortalLongExact[7]>
    Snapshot
    EndInlinedFunction
    Snapshot
    Return v22
  }
}
---
CalleeWithDefaultsNoneSuppliedIsInlined
---
def foo(a=1, b=2):
    return a+b

def test():
    return foo()
---
fun jittestmodule:test {
  bb 0 {
    Snapshot
    v2:OptObject = LoadGlobalCached<0; "foo">
    v3:MortalFunc[function:0xdeadbeef] = GuardIs<0xdeadbeef> v2 {
      Descr 'LOAD_GLOBAL: foo'
    }
    Snapshot
    v5:ImmortalLongExact[1] = LoadConst<ImmortalLongExact[1]>
    v6:ImmortalLongExact[2] = LoadConst<ImmortalLongExact[2]>
    v7:Tuple = LoadField<func_defaults@56, Tuple, borrowed> v3
    v8:MortalTupleExact[tuple:0xdeadbeef] = GuardIs<0xdeadbeef> v7 {
    }
    v20:Object = LoadField<func_code@48, Object, borrowed> v3
    v21:MortalCode["foo"] = GuardIs<0xdeadbeef> v20 {
    }
    BeginInlinedFunction<jittestmodule:foo> {
      NextInstrOffset 4
    }
    Snapshot
    UseType<LongExact> v5
    UseType<LongExact> v6
    UseType<ImmortalLongExact[1]> v5
    UseType<ImmortalLongExact[2]> v6
    v23:ImmortalLongExact[3] = LoadConst<ImmortalLongExact[3]>
    Snapshot
    EndInlinedFunction
    Snapshot
    Return v23
  }
}
---
CalleeWithMixedDefaultsIsInlined
---
def foo(a, b, c=3, d=4):
    return a+b+c+d

def test():
    return foo(1, 2)
---
fun jittestmodule:test {
  bb 0 {
    Snapshot
    v4:OptObject = LoadGlobalCached<0; "foo">
    v5:MortalFunc[function:0xdeadbeef] = GuardIs<0xdeadbeef> v4 {
      Descr 'LOAD_GLOBAL: foo'
    }
    Snapshot
    v6:ImmortalLongExact[1] = LoadConst<ImmortalLongExact[1]>
    v7:ImmortalLongExact[2] = LoadConst<ImmortalLongExact[2]>
    v9:ImmortalLongExact[3] = LoadConst<ImmortalLongExact[3]>
    v10:ImmortalLongExact[4] = LoadConst<ImmortalLongExact[4]>
    v11:Tuple = LoadField<func_defaults@56, Tuple, borrowed> v5
    v12:MortalTupleExact[tuple:0xdeadbeef] = GuardIs<0xdeadbeef> v11 {
    }
    v34:Object = LoadField<func_code@48, Object, borrowed> v5
    v35:MortalCode["foo"] = GuardIs<0xdeadbeef> v34 {
    }
    BeginInlinedFunction<jittestmodule:foo> {
      NextInstrOffset 8
    }
    Snapshot
    UseType<LongExact> v6
    UseType<LongExact> v7
    UseType<ImmortalLongExact[1]> v6
    UseType<ImmortalLongExact[2]> v7
    v39:ImmortalLongExact[3] = LoadConst<ImmortalLongExact[3]>
    Snapshot
    UseType<LongExact> v39
    UseType<LongExact> v9
    UseType<ImmortalLongExact[3]> v39
    UseType<ImmortalLongExact[3]> v9
    v40:ImmortalLongExact[6] = LoadConst<ImmortalLongExact[6]>
    Snapshot
    UseType<LongExact> v40
    UseType<LongExact> v10
    UseType<ImmortalLongExact[6]> v40
    UseType<ImmortalLongExact[4]> v10
    v41:ImmortalLongExact[10] = LoadConst<ImmortalLongExact[10]>
    Snapshot
    EndInlinedFunction
    Snapshot
    Return v41
  }
}
---
