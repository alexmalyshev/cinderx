ProfileDataHIRTest
---
GuardTypeRemoval
---
LoadFromTuple
---
def test(c, i):
  return c[i]
test((1, 2, 3), 1)
---
fun jittestmodule:test {
  bb 0 {
    v3:Object = LoadArg<0; "c">
    v4:Object = LoadArg<1; "i">
    Snapshot
    v7:TupleExact = GuardType<TupleExact> v3 {
      GuiltyReg v3
    }
    v8:LongExact = GuardType<LongExact> v4 {
      GuiltyReg v4
    }
    UseType<TupleExact> v7
    UseType<LongExact> v8
    v10:CInt64 = IndexUnbox<IndexError> v8
    v11:CInt64 = IsNegativeAndErrOccurred v10 {
      FrameState {
        NextInstrOffset 6
        Locals<2> v7 v8
      }
    }
    v12:CInt64 = CheckSequenceBounds v7 v10 {
      FrameState {
        NextInstrOffset 6
        Locals<2> v7 v8
      }
    }
    v13:Object = LoadArrayItem<Offset[24]> v7 v12 v7
    Snapshot
    Return v13
  }
}
---
PolymorphicOperandsTest
---
def test(c, i):
  return c[i]
test((1, 2, 3), 1)
test([1, 2, 3], 1)
test([1, 2, 3], 1)
test([1, 2, 3], 1)
test({"key": "value"}, "key")
test({"key": "value"}, "key")
---
fun jittestmodule:test {
  bb 0 {
    v3:Object = LoadArg<0; "c">
    v4:Object = LoadArg<1; "i">
    Snapshot
    v7:Object = BinaryOp<Subscript> v3 v4 {
      FrameState {
        NextInstrOffset 6
        Locals<2> v3 v4
      }
    }
    Snapshot
    Return v7
  }
}
---
CreateUnreachableCFGLoop
---
def test(x, y):
  if x is None:
    while y:
      pass

test(True, 1)
---
fun jittestmodule:test {
  bb 0 {
    v13:Object = LoadArg<0; "x">
    v14:Object = LoadArg<1; "y">
    Snapshot
    v16:NoneType = LoadConst<NoneType>
    v17:Bool = GuardType<Bool> v13 {
      GuiltyReg v13
    }
    UseType<Bool> v17
    UseType<NoneType> v16
    v36:CBool[false] = LoadConst<CBool[false]>
    UseType<CBool[false]> v36
    v37:ImmortalBool[False] = LoadConst<ImmortalBool[False]>
    UseType<ImmortalBool[False]> v37
    v38:CInt32[0] = LoadConst<CInt32[0]>
    Snapshot
    v35:NoneType = LoadConst<NoneType>
    Return v35
  }
}
---
CallFunctionEx
---
def callee():
  pass

def test(iterable):
  return callee(*iterable)

test(())
test([])
---
fun jittestmodule:test {
  bb 0 {
    v3:Object = LoadArg<0; "iterable">
    Snapshot
    v4:OptObject = LoadGlobalCached<0; "callee">
    v5:MortalFunc[function:0xdeadbeef] = GuardIs<0xdeadbeef> v4 {
      Descr 'LOAD_GLOBAL: callee'
    }
    Snapshot
    v7:Object = CallEx v5 v3 {
      FrameState {
        NextInstrOffset 6
        Locals<1> v3
      }
    }
    Snapshot
    Return v7
  }
}
---
CallFunctionExWithKwargs
---
def callee():
  pass

def test(iterable, mapping):
  return callee(*iterable, **mapping)

class C(dict):
  pass

test((), {})
test([], C({}))
---
fun jittestmodule:test {
  bb 0 {
    v6:Object = LoadArg<0; "iterable">
    v7:Object = LoadArg<1; "mapping">
    Snapshot
    v8:OptObject = LoadGlobalCached<0; "callee">
    v9:MortalFunc[function:0xdeadbeef] = GuardIs<0xdeadbeef> v8 {
      Descr 'LOAD_GLOBAL: callee'
    }
    Snapshot
    v11:MortalDictExact = MakeDict<0> {
      FrameState {
        NextInstrOffset 6
        Locals<2> v6 v7
        Stack<2> v9 v6
      }
    }
    Snapshot
    v13:CInt32 = DictMerge v11 v7 v9 {
      FrameState {
        NextInstrOffset 10
        Locals<2> v6 v7
        Stack<3> v9 v6 v11
      }
    }
    Snapshot
    v14:Object = CallExKw v9 v6 v11 {
      FrameState {
        NextInstrOffset 12
        Locals<2> v6 v7
      }
    }
    Snapshot
    Return v14
  }
}
---
CallFunction
---
def callee(a, b):
  pass

class C:
  def __init__(self, a, b):
    pass

def test(f, a, b):
  return f(a, b)

test(callee, 123, "123")
test(C, "456", (4,5,6))
---
fun jittestmodule:test {
  bb 0 {
    v4:Object = LoadArg<0; "f">
    v5:Object = LoadArg<1; "a">
    v6:Object = LoadArg<2; "b">
    Snapshot
    v10:Object = VectorCall<2> v4 v5 v6 {
      FrameState {
        NextInstrOffset 8
        Locals<3> v4 v5 v6
      }
    }
    Snapshot
    Return v10
  }
}
---
CallFunctionKw
---
def callee(a, b):
  pass

def test(f):
  return f(a=1, b=2)

class C:
  def __init__(self, a, b):
    pass

test(callee)
test(C)
---
fun jittestmodule:test {
  bb 0 {
    v5:Object = LoadArg<0; "f">
    Snapshot
    v7:ImmortalLongExact[1] = LoadConst<ImmortalLongExact[1]>
    v8:ImmortalLongExact[2] = LoadConst<ImmortalLongExact[2]>
    v9:MortalTupleExact[tuple:0xdeadbeef] = LoadConst<MortalTupleExact[tuple:0xdeadbeef]>
    v10:Object = VectorCallKW<3> v5 v7 v8 v9 {
      FrameState {
        NextInstrOffset 10
        Locals<1> v5
      }
    }
    Snapshot
    Return v10
  }
}
---
SpecializeLoadAttrFromSlot
---
class Point:
  def __init__(self, x, y):
    self.x = x
    self.y = y

  __slots__ = ("x", "y")

def test(p):
  return p.x + p.y

test(Point(1, 2))
---
fun jittestmodule:test {
  bb 0 {
    v4:Object = LoadArg<0; "p">
    Snapshot
    v6:ObjectUser[Point:Exact] = GuardType<ObjectUser[Point:Exact]> v4 {
      GuiltyReg v4
    }
    DeoptPatchpoint<0xdeadbeef> {
      Descr 'member descriptor attribute'
      GuiltyReg v6
    }
    UseType<ObjectUser[Point:Exact]> v6
    v14:OptObject = LoadField<x@16, OptObject, borrowed> v6
    v15:Object = CheckField<"x"> v14 {
      GuiltyReg v6
      FrameState {
        NextInstrOffset 4
        Locals<1> v6
      }
    }
    Snapshot
    DeoptPatchpoint<0xdeadbeef> {
      Descr 'member descriptor attribute'
      GuiltyReg v6
    }
    UseType<ObjectUser[Point:Exact]> v6
    v16:OptObject = LoadField<y@24, OptObject, borrowed> v6
    v17:Object = CheckField<"y"> v16 {
      GuiltyReg v6
      FrameState {
        NextInstrOffset 8
        Locals<1> v6
        Stack<1> v15
      }
    }
    Snapshot
    v11:LongExact = GuardType<LongExact> v15 {
      GuiltyReg v15
    }
    v12:LongExact = GuardType<LongExact> v17 {
      GuiltyReg v17
    }
    UseType<LongExact> v11
    UseType<LongExact> v12
    v18:LongExact = LongBinaryOp<Add> v11 v12 {
      FrameState {
        NextInstrOffset 10
        Locals<1> v6
      }
    }
    Snapshot
    Return v18
  }
}
---
SpecializePowerHasCorrectType
---
class Point:
  def __init__(self, x, y):
    self.x = x
    self.y = y

  __slots__ = ("x", "y")

def test(p):
  return p.x ** p.y

test(Point(1, -2))
---
fun jittestmodule:test {
  bb 0 {
    v4:Object = LoadArg<0; "p">
    Snapshot
    v6:ObjectUser[Point:Exact] = GuardType<ObjectUser[Point:Exact]> v4 {
      GuiltyReg v4
    }
    DeoptPatchpoint<0xdeadbeef> {
      Descr 'member descriptor attribute'
      GuiltyReg v6
    }
    UseType<ObjectUser[Point:Exact]> v6
    v14:OptObject = LoadField<x@16, OptObject, borrowed> v6
    v15:Object = CheckField<"x"> v14 {
      GuiltyReg v6
      FrameState {
        NextInstrOffset 4
        Locals<1> v6
      }
    }
    Snapshot
    DeoptPatchpoint<0xdeadbeef> {
      Descr 'member descriptor attribute'
      GuiltyReg v6
    }
    UseType<ObjectUser[Point:Exact]> v6
    v16:OptObject = LoadField<y@24, OptObject, borrowed> v6
    v17:Object = CheckField<"y"> v16 {
      GuiltyReg v6
      FrameState {
        NextInstrOffset 8
        Locals<1> v6
        Stack<1> v15
      }
    }
    Snapshot
    v11:LongExact = GuardType<LongExact> v15 {
      GuiltyReg v15
    }
    v12:LongExact = GuardType<LongExact> v17 {
      GuiltyReg v17
    }
    UseType<LongExact> v11
    UseType<LongExact> v12
    v18:{FloatExact|LongExact} = LongBinaryOp<Power> v11 v12 {
      FrameState {
        NextInstrOffset 10
        Locals<1> v6
      }
    }
    Snapshot
    Return v18
  }
}
---
SpecializeSplitDictLoadAttr
---
class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

def test(p):
  return p.age

test(Person("bob", 30))
---
fun jittestmodule:test {
  bb 0 {
    v2:Object = LoadArg<0; "p">
    Snapshot
    v4:ObjectUser[Person:Exact] = GuardType<ObjectUser[Person:Exact]> v2 {
      GuiltyReg v2
    }
    DeoptPatchpoint<0xdeadbeef> {
      Descr 'SplitDictDeoptPatcher'
      GuiltyReg v4
    }
    UseType<ObjectUser[Person:Exact]> v4
    v6:OptDict = LoadField<__dict__@16, OptDict, borrowed> v4
    v7:Dict = CheckField<"age"> v6 {
      GuiltyReg v4
      FrameState {
        NextInstrOffset 4
        Locals<1> v4
      }
    }
    v8:CPtr = LoadField<ma_keys@32, CPtr, borrowed> v7
    v9:CPtr[0xdeadbeef] = LoadConst<CPtr[0xdeadbeef]>
    v10:CBool = PrimitiveCompare<Equal> v8 v9
    Guard v10 {
      Descr 'ht_cached_keys comparison'
      GuiltyReg v4
    }
    v11:OptObject = LoadSplitDictItem<1> v7
    v12:Object = CheckField<"age"> v11 {
      GuiltyReg v4
      FrameState {
        NextInstrOffset 4
        Locals<1> v4
      }
    }
    Snapshot
    Return v12
  }
}
---
SpecializeLoadAttrFromMemberOnImmutableType
---
from collections import defaultdict
def test(o):
  return o.default_factory
test(defaultdict(int))
---
fun jittestmodule:test {
  bb 0 {
    v2:Object = LoadArg<0; "o">
    Snapshot
    v4:DictUser[collections.defaultdict:Exact] = GuardType<DictUser[collections.defaultdict:Exact]> v2 {
      GuiltyReg v2
    }
    UseType<DictUser[collections.defaultdict:Exact]> v4
    v6:OptObject = LoadField<default_factory@48, OptObject, borrowed> v4
    CondBranch<1, 2> v6
  }

  bb 1 (preds 0) {
    v7:Object = RefineType<Object> v6
    Branch<3>
  }

  bb 2 (preds 0) {
    v8:NoneType = LoadConst<NoneType>
    Branch<3>
  }

  bb 3 (preds 1, 2) {
    v9:Object = Phi<1, 2> v7 v8
    Snapshot
    Return v9
  }
}
---
SpecializeLoadAttrFromProperty
---
class C:
  @property
  def name(self):
    return "bob"

def test(o):
  return o.name

test(C())
---
fun jittestmodule:test {
  bb 0 {
    v2:Object = LoadArg<0; "o">
    Snapshot
    v4:ObjectUser[C:Exact] = GuardType<ObjectUser[C:Exact]> v2 {
      GuiltyReg v2
    }
    DeoptPatchpoint<0xdeadbeef> {
      Descr 'property attribute'
      GuiltyReg v4
    }
    UseType<ObjectUser[C:Exact]> v4
    v6:MortalFunc[function:0xdeadbeef] = LoadConst<MortalFunc[function:0xdeadbeef]>
    v7:Object = VectorCall<1> v6 v4 {
      FrameState {
        NextInstrOffset 4
        Locals<1> v4
      }
    }
    Snapshot
    Return v7
  }
}
---
SpecializeLoadAttrFromUserDescriptor
---
class Descr:
  def __get__(self, instance, owner=None):
    pass
  def __set__(self, instance, value):
    pass

class C:
  attr = Descr()

def test(o):
  return o.attr
test(C())
---
fun jittestmodule:test {
  bb 0 {
    v2:Object = LoadArg<0; "o">
    Snapshot
    v4:ObjectUser[C:Exact] = GuardType<ObjectUser[C:Exact]> v2 {
      GuiltyReg v2
    }
    DeoptPatchpoint<0xdeadbeef> {
      Descr 'generic descriptor attribute'
      GuiltyReg v4
    }
    DeoptPatchpoint<0xdeadbeef> {
      Descr 'tp_descr_get/tp_descr_set'
      GuiltyReg v4
    }
    UseType<ObjectUser[C:Exact]> v4
    v6:MortalObjectUser[Descr:0xdeadbeef] = LoadConst<MortalObjectUser[Descr:0xdeadbeef]>
    v7:MortalTypeExact[C:obj] = LoadConst<MortalTypeExact[C:obj]>
    v8:OptObject = CallStatic<slot_tp_descr_get@0xdeadbeef, 3> v6 v4 v7
    v9:Object = CheckExc v8 {
      FrameState {
        NextInstrOffset 4
        Locals<1> v4
      }
    }
    Snapshot
    Return v9
  }
}
---
