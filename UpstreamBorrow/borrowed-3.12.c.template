// -*- mode: c++ -*- vi: set ft=cpp:
// Copyright (c) Meta Platforms, Inc. and affiliates.

// This file is processed by UpstreamBorrow.py. To see the generated output:
// buck build -c cinderx.use_3_12=True --out=- fbcode//cinderx/UpstreamBorrow:gen_borrowed.c

// clang-format off

#include "cinderx/UpstreamBorrow/borrowed.h"

// In 3.12 _PyAsyncGenValueWrapperNew needs thread-state. As this is used from
// the JIT we could get the value from the thread-state register. This would be
// slightly more efficient, but quite a bit more work and async-generators are
// rare. So we just wrap it up here.

// TODO: Find out what exactly we need from the cpp directives here.
// @Borrow CPP directives from Objects/genobject.c
PyObject* Cix_PyAsyncGenValueWrapperNew(PyObject* value) {
  return _PyAsyncGenValueWrapperNew(PyThreadState_GET(), value);
}

// @Borrow function set_attribute_error_context from Objects/object.c

// Wrapper as set_attribute_error_context is declared "static inline".
int
Cix_set_attribute_error_context(PyObject *v, PyObject *name) {
  return set_attribute_error_context(v, name);
}

// TODO: Get rid of this
// These are global singletons used transitively by _Py_union_type_or.
// We initialize them in init_upstream_borrow().
PyTypeObject* Cix_PyUnion_Type = NULL;
#define _PyUnion_Type (*Cix_PyUnion_Type)

PyTypeObject* Cix_PyTypeAlias_Type = NULL;
#define _PyTypeAlias_Type (*Cix_PyTypeAlias_Type)

// @Borrow var DE_INSTRUMENT from Python/instrumentation.c
uint8_t
Cix_DEINSTRUMENT(uint8_t op) {
  return DE_INSTRUMENT[op];
}

// Internal dependencies for Cix_do_raise.
#define _PyErr_SetRaisedException __PyErr_SetRaisedException
// @Borrow function _PyErr_SetRaisedException from Python/errors.c
// End internal dependencies.
// @Borrow function do_raise from Python/ceval.c
int Cix_do_raise(PyThreadState* tstate, PyObject* exc, PyObject* cause) {
  return do_raise(tstate, exc, cause);
}

int init_upstream_borrow(void) {
  // Initialize the Cix_PyUnion_Type global reference.
  PyObject* unionobj =
      PyNumber_Or((PyObject*)&PyLong_Type, (PyObject*)&PyUnicode_Type);
  if (unionobj != NULL) {
    Cix_PyUnion_Type = Py_TYPE(unionobj);
    Py_DECREF(unionobj);
  }
  if (Cix_PyUnion_Type == NULL) {
    return -1;
  }

  // Initialize the Cix_PyTypeAlias_Type global reference.
  PyObject* typing_module = PyImport_ImportModule("typing");
  if (!typing_module) {
    return -1;
  }
  PyObject* type_alias_type =
      PyObject_GetAttrString(typing_module, "TypeAliasType");

  if (!type_alias_type) {
    Py_DECREF(typing_module);
    return -1;
  }
  assert(PyType_Check(type_alias_type));
  Cix_PyTypeAlias_Type = (PyTypeObject*)type_alias_type;
  Py_DECREF(typing_module);

  return 0;
}
