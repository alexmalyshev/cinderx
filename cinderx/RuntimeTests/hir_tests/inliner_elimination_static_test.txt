--- Test Suite Name ---
InlinerEliminationStaticTest
--- Passes ---
InlineFunctionCalls
Simplify
BeginInlinedFunctionElimination
--- Test Name ---
Simple
--- Input ---
def foo():
    # Chosen by fair dice roll. Guaranteed to be random.
    return 4

def test():
    return foo()
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    Snapshot
    v2:MortalFunc[function:0xdeadbeef] = LoadConst<MortalFunc[function:0xdeadbeef]>
    v6:ImmortalLongExact[4] = LoadConst<ImmortalLongExact[4]>
    Snapshot
    Return v6
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v5:Func = LoadCurrentFunc
    Snapshot
    v6:CInt32 = LoadEvalBreaker
    CondBranch<2, 1> v6
  }

  bb 2 (preds 0) {
    Snapshot
    v7:CInt32 = RunPeriodicTasks {
      FrameState {
        CurInstrOffset 0
      }
    }
    Branch<1>
  }

  bb 1 (preds 0, 2) {
    Snapshot
    v8:MortalFunc[function:0xdeadbeef] = LoadConst<MortalFunc[function:0xdeadbeef]>
    BeginInlinedFunction<jittestmodule:foo> {
      CurInstrOffset 2
    }
    Snapshot
    v14:CInt32 = LoadEvalBreaker
    CondBranch<5, 4> v14
  }

  bb 5 (preds 1) {
    Snapshot
    v15:CInt32 = RunPeriodicTasks {
      FrameState {
        CurInstrOffset 0
      }
    }
    Branch<4>
  }

  bb 4 (preds 1, 5) {
    Snapshot
    v16:ImmortalLongExact[4] = LoadConst<ImmortalLongExact[4]>
    EndInlinedFunction
    Snapshot
    Return v16
  }
}
--- Test Name ---
InlineMultipleFunctions
--- Input ---
def foo():
    return 3

def bar():
    return 4

def test():
    return foo() + bar()
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    Snapshot
    v5:MortalFunc[function:0xdeadbeef] = LoadConst<MortalFunc[function:0xdeadbeef]>
    v12:ImmortalLongExact[3] = LoadConst<ImmortalLongExact[3]>
    Snapshot
    v7:MortalFunc[function:0xdeadbeef] = LoadConst<MortalFunc[function:0xdeadbeef]>
    v16:ImmortalLongExact[4] = LoadConst<ImmortalLongExact[4]>
    Snapshot
    UseType<LongExact> v12
    UseType<LongExact> v16
    UseType<ImmortalLongExact[3]> v12
    UseType<ImmortalLongExact[4]> v16
    v19:ImmortalLongExact[7] = LoadConst<ImmortalLongExact[7]>
    Snapshot
    Return v19
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v8:Func = LoadCurrentFunc
    Snapshot
    v9:CInt32 = LoadEvalBreaker
    CondBranch<2, 1> v9
  }

  bb 2 (preds 0) {
    Snapshot
    v10:CInt32 = RunPeriodicTasks {
      FrameState {
        CurInstrOffset 0
      }
    }
    Branch<1>
  }

  bb 1 (preds 0, 2) {
    Snapshot
    v11:MortalFunc[function:0xdeadbeef] = LoadConst<MortalFunc[function:0xdeadbeef]>
    BeginInlinedFunction<jittestmodule:foo> {
      CurInstrOffset 2
    }
    Snapshot
    v20:CInt32 = LoadEvalBreaker
    CondBranch<5, 4> v20
  }

  bb 5 (preds 1) {
    Snapshot
    v21:CInt32 = RunPeriodicTasks {
      FrameState {
        CurInstrOffset 0
      }
    }
    Branch<4>
  }

  bb 4 (preds 1, 5) {
    Snapshot
    v22:ImmortalLongExact[3] = LoadConst<ImmortalLongExact[3]>
    EndInlinedFunction
    Snapshot
    v13:MortalFunc[function:0xdeadbeef] = LoadConst<MortalFunc[function:0xdeadbeef]>
    BeginInlinedFunction<jittestmodule:bar> {
      CurInstrOffset 14
      Stack<1> v22
    }
    Snapshot
    v29:CInt32 = LoadEvalBreaker
    CondBranch<10, 9> v29
  }

  bb 10 (preds 4) {
    Snapshot
    v30:CInt32 = RunPeriodicTasks {
      FrameState {
        CurInstrOffset 0
      }
    }
    Branch<9>
  }

  bb 9 (preds 4, 10) {
    Snapshot
    v31:ImmortalLongExact[4] = LoadConst<ImmortalLongExact[4]>
    EndInlinedFunction
    Snapshot
    UseType<LongExact> v22
    UseType<LongExact> v31
    UseType<ImmortalLongExact[3]> v22
    UseType<ImmortalLongExact[4]> v31
    v35:ImmortalLongExact[7] = LoadConst<ImmortalLongExact[7]>
    Snapshot
    Return v35
  }
}
--- Test Name ---
BeginEndWithMemoryEffectsNotRemoved
--- Input ---
def add(x, y):
  return x + y

def test():
    return add(3, "x")
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    Snapshot
    v4:ImmortalLongExact[3] = LoadConst<ImmortalLongExact[3]>
    v5:MortalUnicodeExact["x"] = LoadConst<MortalUnicodeExact["x"]>
    v6:MortalFunc[function:0xdeadbeef] = LoadConst<MortalFunc[function:0xdeadbeef]>
    BeginInlinedFunction<jittestmodule:add> {
      CurInstrOffset 4
    }
    Snapshot
    v16:Object = BinaryOp<Add> v4 v5 {
      FrameState {
        CurInstrOffset 4
        Locals<2> v4 v5
      }
    }
    Snapshot
    EndInlinedFunction
    Snapshot
    Return v16
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v7:Func = LoadCurrentFunc
    Snapshot
    v8:CInt32 = LoadEvalBreaker
    CondBranch<2, 1> v8
  }

  bb 2 (preds 0) {
    Snapshot
    v9:CInt32 = RunPeriodicTasks {
      FrameState {
        CurInstrOffset 0
      }
    }
    Branch<1>
  }

  bb 1 (preds 0, 2) {
    Snapshot
    v10:ImmortalLongExact[3] = LoadConst<ImmortalLongExact[3]>
    v11:ImmortalUnicodeExact["x"] = LoadConst<ImmortalUnicodeExact["x"]>
    v12:MortalFunc[function:0xdeadbeef] = LoadConst<MortalFunc[function:0xdeadbeef]>
    BeginInlinedFunction<jittestmodule:add> {
      CurInstrOffset 6
    }
    Snapshot
    v22:CInt32 = LoadEvalBreaker
    CondBranch<5, 4> v22
  }

  bb 5 (preds 1) {
    Snapshot
    v23:CInt32 = RunPeriodicTasks {
      FrameState {
        CurInstrOffset 0
        Locals<2> v10 v11
      }
    }
    Branch<4>
  }

  bb 4 (preds 1, 5) {
    Snapshot
    v26:Object = BinaryOp<Add> v10 v11 {
      FrameState {
        CurInstrOffset 6
        Locals<2> v10 v11
      }
    }
    Snapshot
    EndInlinedFunction
    Snapshot
    Return v26
  }
}
--- Test Name ---
InlinedStoreFieldLoadFieldIsEliminated
--- Input ---
from __static__ import int8

class C:
  def __init__(self):
    self.foo: int8 = 4

  def getfoo(self) -> int8:
    return self.foo

def test() -> int8:
    return C().getfoo()
--- Expected 3.10 ---
fun jittestmodule:test {
  bb 0 {
    Snapshot
    v5:ObjectUser[C:Exact] = TpAlloc<C> {
      FrameState {
        CurInstrOffset 0
      }
    }
    Snapshot
    v6:MortalFunc[function:0xdeadbeef] = LoadConst<MortalFunc[function:0xdeadbeef]>
    v17:CInt8[4] = LoadConst<CInt8[4]>
    v19:Nullptr = LoadConst<Nullptr>
    UseType<CInt8> v17
    StoreField<foo@16> v5 v17 v19
    v21:NoneType = LoadConst<NoneType>
    Snapshot
    v8:MortalFunc[function:0xdeadbeef] = LoadConst<MortalFunc[function:0xdeadbeef]>
    v28:CInt8 = LoadField<foo@16, CInt8, borrowed> v5
    Snapshot
    Return<CInt8> v28
  }
}
--- Expected 3.12 ---
fun jittestmodule:test {
  bb 0 {
    v8:Func = LoadCurrentFunc
    Snapshot
    v9:CInt32 = LoadEvalBreaker
    CondBranch<2, 1> v9
  }

  bb 2 (preds 0) {
    Snapshot
    v10:CInt32 = RunPeriodicTasks {
      FrameState {
        CurInstrOffset 0
      }
    }
    Branch<1>
  }

  bb 1 (preds 0, 2) {
    Snapshot
    v11:ObjectUser[C:Exact] = TpAlloc<C> {
      FrameState {
        CurInstrOffset 2
      }
    }
    Snapshot
    v12:MortalFunc[function:0xdeadbeef] = LoadConst<MortalFunc[function:0xdeadbeef]>
    BeginInlinedFunction<jittestmodule:C.__init__> {
      CurInstrOffset 10
      Stack<1> v11
    }
    Snapshot
    v25:CInt32 = LoadEvalBreaker
    CondBranch<5, 4> v25
  }

  bb 5 (preds 1) {
    Snapshot
    v26:CInt32 = RunPeriodicTasks {
      FrameState {
        CurInstrOffset 0
        Locals<1> v11
      }
    }
    Branch<4>
  }

  bb 4 (preds 1, 5) {
    Snapshot
    v28:CInt8[4] = LoadConst<CInt8[4]>
    v29:Nullptr = LoadConst<Nullptr>
    UseType<CInt8> v28
    StoreField<foo@16> v11 v28 v29
    Snapshot
    v31:ImmortalNoneType = LoadConst<ImmortalNoneType>
    EndInlinedFunction
    Snapshot
    v14:MortalFunc[function:0xdeadbeef] = LoadConst<MortalFunc[function:0xdeadbeef]>
    BeginInlinedFunction<jittestmodule:C.getfoo> {
      CurInstrOffset 24
    }
    Snapshot
    v40:CInt32 = LoadEvalBreaker
    CondBranch<10, 9> v40
  }

  bb 10 (preds 4) {
    Snapshot
    v41:CInt32 = RunPeriodicTasks {
      FrameState {
        CurInstrOffset 0
        Locals<1> v11
      }
    }
    Branch<9>
  }

  bb 9 (preds 4, 10) {
    Snapshot
    v43:CInt8 = LoadField<foo@16, CInt8, borrowed> v11
    Snapshot
    EndInlinedFunction
    Snapshot
    Return<CInt8> v43
  }
}
--- End ---
