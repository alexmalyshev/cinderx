// -*- mode: c++ -*- vi: set ft=cpp:
// Copyright (c) Meta Platforms, Inc. and affiliates.

// This file is processed by UpstreamBorrow.py. To see the generated output:
// buck build -m ovr_config//third-party/python/constraints:3.12 \
//     --out=- fbcode//cinderx/UpstreamBorrow:borrowed_gen_borrowed.c

// clang-format off

#include "cinderx/UpstreamBorrow/borrowed.h"
#include "cinderx/module_c_state.h"

// In 3.12 _PyAsyncGenValueWrapperNew needs thread-state. As this is used from
// the JIT we could get the value from the thread-state register. This would be
// slightly more efficient, but quite a bit more work and async-generators are
// rare. So we just wrap it up here.

// TODO: Find out what exactly we need from the cpp directives here.
// @Borrow CPP directives from Objects/genobject.c
PyObject* Cix_PyAsyncGenValueWrapperNew(PyObject* value) {
  return _PyAsyncGenValueWrapperNew(PyThreadState_GET(), value);
}

// @Borrow function compute_cr_origin from Objects/genobject.c
PyObject* Cix_compute_cr_origin(int origin_depth, _PyInterpreterFrame* current_frame) {
  return compute_cr_origin(origin_depth, current_frame);
}

int Cix_PyObjectDict_SetItem(
    PyTypeObject* tp,
    PyObject* obj,
    PyObject** dictptr,
    PyObject* key,
    PyObject* value) {
  (void)obj;
  return _PyObjectDict_SetItem(tp, dictptr, key, value);
}

// @Borrow function set_attribute_error_context from Objects/object.c

// Wrapper as set_attribute_error_context is declared "static inline".
int
Cix_set_attribute_error_context(PyObject *v, PyObject *name) {
  return set_attribute_error_context(v, name);
}

// @Borrow var DE_INSTRUMENT from Python/instrumentation.c
uint8_t
Cix_DEINSTRUMENT(uint8_t op) {
  return DE_INSTRUMENT[op];
}

// Internal dependencies for match_class.
// @Borrow function match_class_attr from Python/ceval.c
// End internal dependencies.
// @Borrow function match_class from Python/ceval.c
PyObject* Cix_match_class(
    PyThreadState* tstate,
    PyObject* subject,
    PyObject* type,
    Py_ssize_t nargs,
    PyObject* kwargs) {
  return match_class(tstate, subject, type, nargs, kwargs);
}

// @Borrow function match_keys from Python/ceval.c
PyObject* Cix_match_keys(PyThreadState* tstate, PyObject* map, PyObject* keys) {
  return match_keys(tstate, map, keys);
}

// @Borrow function format_kwargs_error from Python/ceval.c
void Cix_format_kwargs_error(
    PyThreadState* tstate,
    PyObject* func,
    PyObject* kwargs) {
  format_kwargs_error(tstate, func, kwargs);
}

// @Borrow function format_exc_check_arg from Python/ceval.c
void Cix_format_exc_check_arg(
    PyThreadState* tstate,
    PyObject* exc,
    const char* format_str,
    PyObject* obj) {
  format_exc_check_arg(tstate, exc, format_str, obj);
}

// Internal dependencies for gc_freeze_impl.
// @Borrow CPP directives noinclude from Modules/gcmodule.c
// @Borrow typedef GCState from Modules/gcmodule.c
// @Borrow function gc_list_init from Modules/gcmodule.c
// @Borrow function gc_list_is_empty from Modules/gcmodule.c
// @Borrow function get_gc_state from Modules/gcmodule.c
// @Borrow function gc_list_merge from Modules/gcmodule.c
// End internal dependencies.

// @Borrow function gc_freeze_impl from Modules/gcmodule.c
PyObject* Cix_gc_freeze_impl(PyObject* mod) {
  return gc_freeze_impl(mod);
}

// Recreate builtin_next_impl (removed in https://github.com/python/cpython/pull/130371)

PyObject* builtin_next_impl(PyObject *it, PyObject* def)
{
    PyObject *res;

    if (!PyIter_Check(it)) {
        PyErr_Format(PyExc_TypeError,
                "'%.200s' object is not an iterator",
                Py_TYPE(it)->tp_name);
        return NULL;
    }

    res = (*Py_TYPE(it)->tp_iternext)(it);
    if (res != NULL) {
        return res;
    } else if (def != NULL) {
        if (PyErr_Occurred()) {
            if(!PyErr_ExceptionMatches(PyExc_StopIteration))
                return NULL;
            PyErr_Clear();
        }
        return Py_NewRef(def);
    } else if (PyErr_Occurred()) {
        return NULL;
    } else {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
}

PyObject* Ci_Builtin_Next_Core(PyObject* it, PyObject* def) {
    return builtin_next_impl(it, def);
}

int init_upstream_borrow(void) {
  // Nothing to do here; retained for consistency with 3.10
  return 0;
}

// Internal dependencies for gen_dealloc.
// @Borrow function _PyGen_GetCode from Objects/genobject.c
// End internal dependencies.
// Use our own memory deallocation which handles generators that might be on
// our custom free-list.
#define PyObject_GC_Del(x) Ci_free_jit_list_gen(x)
// @Borrow function gen_dealloc from Objects/genobject.c
#undef PyObject_GC_Del
void Cix_gen_dealloc_with_custom_free(PyObject* obj) {
    gen_dealloc((PyGenObject*)obj);
}
